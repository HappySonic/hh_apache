<?php

namespace Container59KXm3P;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMassiveSearch_Metadata_Provider_ChainService extends App_KernelProdContainer
{
    /*
     * Gets the private 'massive_search.metadata.provider.chain' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Metadata\Provider\ChainProvider
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 5).'/vendor/massive/search-bundle/Search/Metadata/ProviderInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/massive/search-bundle/Search/Metadata/Provider/ChainProvider.php';
        include_once \dirname(__DIR__, 5).'/vendor/massive/search-bundle/Search/Metadata/Provider/DefaultProvider.php';
        include_once \dirname(__DIR__, 5).'/vendor/sulu/sulu/src/Sulu/Bundle/PageBundle/Search/Metadata/StructureProvider.php';
        include_once \dirname(__DIR__, 5).'/vendor/massive/search-bundle/Search/Factory.php';
        include_once \dirname(__DIR__, 5).'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Search/Factory.php';

        return $container->privates['massive_search.metadata.provider.chain'] = new \Massive\Bundle\SearchBundle\Search\Metadata\Provider\ChainProvider([0 => new \Massive\Bundle\SearchBundle\Search\Metadata\Provider\DefaultProvider(($container->privates['massive_search.metadata.factory'] ?? $container->load('getMassiveSearch_Metadata_FactoryService'))), 1 => new \Sulu\Bundle\PageBundle\Search\Metadata\StructureProvider(($container->privates['sulu_search.search.factory'] ?? ($container->privates['sulu_search.search.factory'] = new \Sulu\Bundle\SearchBundle\Search\Factory())), ($container->privates['sulu_document_manager.metadata_factory'] ?? $container->getSuluDocumentManager_MetadataFactoryService()), ($container->services['sulu_page.structure.factory'] ?? $container->getSuluPage_Structure_FactoryService()), ($container->services['sulu_page.extension.manager'] ?? $container->load('getSuluPage_Extension_ManagerService')), $container->parameters['sulu_page.search.mapping'])]);
    }
}
